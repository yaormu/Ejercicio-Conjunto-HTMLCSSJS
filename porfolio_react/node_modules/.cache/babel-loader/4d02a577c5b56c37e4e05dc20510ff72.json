{"ast":null,"code":"var _jsxFileName = \"/home/yamid/Documentos/TallerFinalHTML5CSS3JavaScript/porfolio_react/src/routes/TallerArreglos.jsx\";\nimport React from 'react';\nimport YoutubeEmbed from \"../components/YoutubeEmbed\";\nimport cuadro from \"../assets/images/cuadro.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TallerArreglos = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Taller de Arreglos PSeInt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"1. Crear un vector de tipo Entero con 5 posiciones, llenarlo con informaci\\xF3n solicitada al usuario. Despu\\xE9s de recoger toda la informaci\\xF3n, se requiere imprimir el \\xEDndice de cada posici\\xF3n en el arreglo con su valor de la siguiente manera:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"[0] = 55\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"[1] = 99\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"[2] = 11\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"[3] = 56\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"[4] = 69\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: `\n          Proceso Ejercicio1\n\t\n            Definir numerosArreglo, i, num Como Entero;\n            \n            Dimension  numerosArreglo[5];\n            \n            Para i <- 0 Hasta 4 Con Paso 1 Hacer\n              Escribir \"Digite un número: \", i, \" del arreglo\";\n              Leer num;\n              numerosArreglo[i] <- num;\n              Limpiar Pantalla;\n            FinPara\n            \n            Para i <- 0 Hasta 4 Con Paso 1 Hacer\n              Escribir numerosArreglo[i];\n            FinPara\n            \n          FinProceso\n        `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"2. Crear un arreglo de n\\xFAmeros enteros de 20 posiciones, el cual, debe ser llenado con n\\xFAmeros aleatorios entre 1 y 100; despu\\xE9s de haber llenado dicho arreglo, se debe volver a recorrer utilizando un ciclo diferente al que se us\\xF3 para llenarse e imprimir los n\\xFAmeros pares e impares. Ejemplo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"N\\xFAmeros pares: 2, 4, 6, 8, 10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"N\\xFAmeros impares: 1, 3, 5, 7, 9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: `\n            Proceso Ejercicio2\n              Definir a,arreglo,i,num,j, par, impar Como Entero;\n              a <- 1;\n              i <- 1;\n              Dimension arreglo[21];\n              Dimension par[21];\n              Dimension impar[21];\n\n              num <- azar(10);\n\n              Mientras i<=20 Hacer\n                arreglo[i] <- azar(100);\n                // Escribir arreglo[i]\n                i <- i+1;\n              FinMientras\n\n              Escribir \"Números pares: \" Sin Saltar;\n\n              Para i<-1 Hasta 20 Hacer\n                //Escribir arreglo[i];\n                Si arreglo[i] MOD 2 == 0 Entonces\n                  Escribir arreglo[i], \", \" Sin Saltar;\n                  par[i] <- arreglo[i];\n                FinSi\n              FinPara\n\n              Escribir \"\";\n\n              Escribir \"Números impares: \" Sin Saltar;\n\n              Para i<-1 Hasta 20 Hacer\n                //Escribir arreglo[i];\n                Si arreglo[i] MOD 2 == 1 Entonces\n                  Escribir arreglo[i], \", \" Sin Saltar;\n                  impar[i] <- arreglo[i];\n                FinSi\n              FinPara\n\n              Escribir \"\";\n\n            FinProceso\n        `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"3. Imprimir los n\\xFAmeros primos del 1 al 1000, el resultado debe ser buscado de forma matem\\xE1tica.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: `\n           Proceso sin_titulo\n            Definir arreglo,i,j,num,contador, div Como Entero;\n\n            num <- 0;\n            contador <- 0;\n\n            Dimension arreglo[1001];\n\n            Para i<-0 Hasta 1000 Hacer\n              arreglo[i] <- num;\n              num <- num+1;\n            FinPara\n\n            Para i<-0 Hasta 1000 Con Paso 1 Hacer\n\n              div <- 0;\n\n              Para j<-1 Hasta arreglo[i] Con Paso 1 Hacer\n                Si arreglo[i] % j == 0 Entonces\n                  div <- div + 1;\n                FinSi\n              FinPara\n\n              Si div == 2 Entonces\n                Escribir arreglo[i];\n              FinSi\n            FinPara\t\n\n          FinProceso\n        `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"4. Dada la siguiente matriz bidimensional, el cual debe de quemar en el c\\xF3digo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"01 02 03 04 05\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"06 07 08 09 10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"11 12 13 14 15\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"16 17 18 19 20\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"Utilizando el conocimiento adquirido, a excepci\\xF3n de hacerlo de forma manual, imprima la siguiente matriz bidimensional.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"01 02 03 04 05\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"10 09 08 07 06\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"11 12 13 14 15\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"20 19 18 17 16\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: `\n            Proceso Ejercicio4\n\t\n              Definir datosNumeros Como Caracter;\n              Definir i, j, l Como Entero;\n\n              Dimension datosNumeros[5, 4];\n\n              datosNumeros[0,0] <- \"01\";\n              datosNumeros[1,0] <- \"02\";\n              datosNumeros[2,0] <- \"03\";\n              datosNumeros[3,0] <- \"04\";\n              datosNumeros[4,0] <- \"05\";\n\n              datosNumeros[0,1] <- \"06\";\n              datosNumeros[1,1] <- \"07\";\n              datosNumeros[2,1] <- \"08\";\n              datosNumeros[3,1] <- \"09\";\n              datosNumeros[4,1] <- \"10\";\n\n              datosNumeros[0,2] <- \"11\";\n              datosNumeros[1,2] <- \"12\";\n              datosNumeros[2,2] <- \"13\";\n              datosNumeros[3,2] <- \"14\";\n              datosNumeros[4,2] <- \"15\";\n\n              datosNumeros[0,3] <- \"16\";\n              datosNumeros[1,3] <- \"17\";\n              datosNumeros[2,3] <- \"18\";\n              datosNumeros[3,3] <- \"19\";\n              datosNumeros[4,3] <- \"20\";\n\n              Para i <- 0 Hasta 4-1 Con Paso 1 Hacer\n                Para j <- 0 Hasta 5-1 Con Paso 1 Hacer\n                  Escribir \"  \", datosNumeros[j, i] Sin Saltar ;\n                FinPara\n                Escribir \"\";\n              FinPara\n\n              Escribir \"\";\n\n\n              Para l <- 0 Hasta 4 Con Paso 1 Hacer\n                Escribir \"  \", datosNumeros[l, 0] Sin Saltar ;\n              FinPara\n\n              Escribir \"\";\n\n              Para l <- 4 Hasta 0 Con Paso -1 Hacer\n                Escribir \"  \", datosNumeros[l, 1] Sin Saltar ;\n              FinPara\n\n              Escribir \"\";\n\n              Para l <- 0 Hasta 4 Con Paso 1 Hacer\n                Escribir \"  \", datosNumeros[l, 2] Sin Saltar ;\n              FinPara\n\n              Escribir \"\";\n\n              Para l <- 4 Hasta 0 Con Paso -1 Hacer\n                Escribir \"  \", datosNumeros[l, 3] Sin Saltar ;\n              FinPara\n\n              Escribir \"\";\n\n            FinProceso\n        `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YoutubeEmbed, {\n      embedId: \"watch?v=ngpPrvPLRjA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"enunciado-programas\",\n        children: \"5. Se debe de imprimir el siguiente cuadro - dolikos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: cuadro,\n        alt: \"cuadro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"El usuario deber\\xE1 insertar la fila y columna de la cual desea ver el resultado, el resultado de cada celda debe estar previamente calculado en una matriz bidimensional la cual cada resultado obedecer\\xE1 a la fila y columna insertada por el usuario.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: `\n            Proceso Ejercicio5 \n\t\n              Definir fila, columna, arreglo, i, j Como Entero; \n              Definir arregloTabla Como Entero; \n\n              Dimension arreglo[10, 10]; \n\n\n              Escribir \"   0   1   2   3   4   5   6   7   8   9\";\n\n              // Prueba validar resultados de la multiplicacion de datos ingresados \n              Para fila <- 1 Hasta 10 Con Paso 1 Hacer \n                Escribir  fila-1, \" \" Sin Saltar; \n                Para columna <- 1 Hasta 10 Con Paso 1 Hacer \n\n                  Escribir columna,  \"x\", fila , \" \" Sin Saltar; \n                FinPara \n                Escribir \"\"; \n              FinPara \n\n              Escribir \"\"; \n\n              i<-1; \n              j<-1; \n              // Ingresar datos al arreglo \n              Para fila <- 0 Hasta 9 Con Paso 1 Hacer \n                Para columna <- 0 Hasta 9 Con Paso 1 Hacer \n                  arreglo[fila, columna] <- i * j; \n                  i <- i+1; \n                FinPara \n                i<-1; \n                j <- j+1; \n              FinPara \n\n\n              Escribir \"Ingrese la fila a consultar: \"; \n              Leer fila; \n\n              Escribir \"Ingrese la columna a consultar: \"; \n              Leer columna; \n\n              //Limpiar Pantalla; \n\n              Escribir \"El resultado es: \", arreglo[fila, columna]; \n\n            FinProceso\n        `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c = TallerArreglos;\nexport default TallerArreglos;\n\nvar _c;\n\n$RefreshReg$(_c, \"TallerArreglos\");","map":{"version":3,"sources":["/home/yamid/Documentos/TallerFinalHTML5CSS3JavaScript/porfolio_react/src/routes/TallerArreglos.jsx"],"names":["React","YoutubeEmbed","cuadro","TallerArreglos"],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnEQ;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YAnHF,eAoME,QAAC,YAAD;AAAc,MAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,YApMF,eAsME;AAAA,8BACE;AAAG,QAAA,SAAS,EAAC,qBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,GAAG,EAAED,MAAV;AAAkB,QAAA,GAAG,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA,kBAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/CQ;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAtMF;AAAA,kBADF;AA+PD,CAhQD;;KAAMC,c;AAkQN,eAAeA,cAAf","sourcesContent":["import React from 'react'\nimport YoutubeEmbed from \"../components/YoutubeEmbed\"\nimport cuadro from \"../assets/images/cuadro.png\"\nconst TallerArreglos = () => {\n  return (\n    <>\n      <h1>Taller de Arreglos PSeInt</h1>\n      <div>\n        <p className=\"enunciado-programas\">1. Crear un vector de tipo Entero con 5 posiciones, llenarlo con información solicitada al usuario. Después de recoger toda la información, se requiere imprimir el índice de cada posición en el arreglo con su valor de la siguiente manera:</p>\n        <p className=\"enunciado-programas\">[0] = 55</p>\n        <p className=\"enunciado-programas\">[1] = 99</p>\n        <p className=\"enunciado-programas\">[2] = 11</p>\n        <p className=\"enunciado-programas\">[3] = 56</p>\n        <p className=\"enunciado-programas\">[4] = 69</p>\n        <pre>{`\n          Proceso Ejercicio1\n\t\n            Definir numerosArreglo, i, num Como Entero;\n            \n            Dimension  numerosArreglo[5];\n            \n            Para i <- 0 Hasta 4 Con Paso 1 Hacer\n              Escribir \"Digite un número: \", i, \" del arreglo\";\n              Leer num;\n              numerosArreglo[i] <- num;\n              Limpiar Pantalla;\n            FinPara\n            \n            Para i <- 0 Hasta 4 Con Paso 1 Hacer\n              Escribir numerosArreglo[i];\n            FinPara\n            \n          FinProceso\n        `}</pre>\n      </div>\n\n      <div>\n        <p className=\"enunciado-programas\">2. Crear un arreglo de números enteros de 20 posiciones, el cual, debe ser llenado con números aleatorios entre 1 y 100; después de haber llenado dicho arreglo, se debe volver a recorrer utilizando un ciclo diferente al que se usó para llenarse e imprimir los números pares e impares. Ejemplo</p>\n        <p className=\"enunciado-programas\">Números pares: 2, 4, 6, 8, 10</p>\n        <p className=\"enunciado-programas\">Números impares: 1, 3, 5, 7, 9</p>\n        <pre>{`\n            Proceso Ejercicio2\n              Definir a,arreglo,i,num,j, par, impar Como Entero;\n              a <- 1;\n              i <- 1;\n              Dimension arreglo[21];\n              Dimension par[21];\n              Dimension impar[21];\n\n              num <- azar(10);\n\n              Mientras i<=20 Hacer\n                arreglo[i] <- azar(100);\n                // Escribir arreglo[i]\n                i <- i+1;\n              FinMientras\n\n              Escribir \"Números pares: \" Sin Saltar;\n\n              Para i<-1 Hasta 20 Hacer\n                //Escribir arreglo[i];\n                Si arreglo[i] MOD 2 == 0 Entonces\n                  Escribir arreglo[i], \", \" Sin Saltar;\n                  par[i] <- arreglo[i];\n                FinSi\n              FinPara\n\n              Escribir \"\";\n\n              Escribir \"Números impares: \" Sin Saltar;\n\n              Para i<-1 Hasta 20 Hacer\n                //Escribir arreglo[i];\n                Si arreglo[i] MOD 2 == 1 Entonces\n                  Escribir arreglo[i], \", \" Sin Saltar;\n                  impar[i] <- arreglo[i];\n                FinSi\n              FinPara\n\n              Escribir \"\";\n\n            FinProceso\n        `}</pre>\n      </div>\n\n      <div>\n        <p className=\"enunciado-programas\">3. Imprimir los números primos del 1 al 1000, el resultado debe ser buscado de forma matemática.</p>\n        <pre>{`\n           Proceso sin_titulo\n            Definir arreglo,i,j,num,contador, div Como Entero;\n\n            num <- 0;\n            contador <- 0;\n\n            Dimension arreglo[1001];\n\n            Para i<-0 Hasta 1000 Hacer\n              arreglo[i] <- num;\n              num <- num+1;\n            FinPara\n\n            Para i<-0 Hasta 1000 Con Paso 1 Hacer\n\n              div <- 0;\n\n              Para j<-1 Hasta arreglo[i] Con Paso 1 Hacer\n                Si arreglo[i] % j == 0 Entonces\n                  div <- div + 1;\n                FinSi\n              FinPara\n\n              Si div == 2 Entonces\n                Escribir arreglo[i];\n              FinSi\n            FinPara\t\n\n          FinProceso\n        `}</pre>\n      </div>\n\n      <div>\n        <p className=\"enunciado-programas\">4. Dada la siguiente matriz bidimensional, el cual debe de quemar en el código</p>\n        <p className=\"enunciado-programas\">01 02 03 04 05</p>\n        <p className=\"enunciado-programas\">06 07 08 09 10</p>\n        <p className=\"enunciado-programas\">11 12 13 14 15</p>\n        <p className=\"enunciado-programas\">16 17 18 19 20</p>\n        <p className=\"enunciado-programas\">Utilizando el conocimiento adquirido, a excepción de hacerlo de forma manual, imprima la siguiente matriz bidimensional.</p>\n        <p className=\"enunciado-programas\">01 02 03 04 05</p>\n        <p className=\"enunciado-programas\">10 09 08 07 06</p>\n        <p className=\"enunciado-programas\">11 12 13 14 15</p>\n        <p className=\"enunciado-programas\">20 19 18 17 16</p>\n        <pre>{`\n            Proceso Ejercicio4\n\t\n              Definir datosNumeros Como Caracter;\n              Definir i, j, l Como Entero;\n\n              Dimension datosNumeros[5, 4];\n\n              datosNumeros[0,0] <- \"01\";\n              datosNumeros[1,0] <- \"02\";\n              datosNumeros[2,0] <- \"03\";\n              datosNumeros[3,0] <- \"04\";\n              datosNumeros[4,0] <- \"05\";\n\n              datosNumeros[0,1] <- \"06\";\n              datosNumeros[1,1] <- \"07\";\n              datosNumeros[2,1] <- \"08\";\n              datosNumeros[3,1] <- \"09\";\n              datosNumeros[4,1] <- \"10\";\n\n              datosNumeros[0,2] <- \"11\";\n              datosNumeros[1,2] <- \"12\";\n              datosNumeros[2,2] <- \"13\";\n              datosNumeros[3,2] <- \"14\";\n              datosNumeros[4,2] <- \"15\";\n\n              datosNumeros[0,3] <- \"16\";\n              datosNumeros[1,3] <- \"17\";\n              datosNumeros[2,3] <- \"18\";\n              datosNumeros[3,3] <- \"19\";\n              datosNumeros[4,3] <- \"20\";\n\n              Para i <- 0 Hasta 4-1 Con Paso 1 Hacer\n                Para j <- 0 Hasta 5-1 Con Paso 1 Hacer\n                  Escribir \"  \", datosNumeros[j, i] Sin Saltar ;\n                FinPara\n                Escribir \"\";\n              FinPara\n\n              Escribir \"\";\n\n\n              Para l <- 0 Hasta 4 Con Paso 1 Hacer\n                Escribir \"  \", datosNumeros[l, 0] Sin Saltar ;\n              FinPara\n\n              Escribir \"\";\n\n              Para l <- 4 Hasta 0 Con Paso -1 Hacer\n                Escribir \"  \", datosNumeros[l, 1] Sin Saltar ;\n              FinPara\n\n              Escribir \"\";\n\n              Para l <- 0 Hasta 4 Con Paso 1 Hacer\n                Escribir \"  \", datosNumeros[l, 2] Sin Saltar ;\n              FinPara\n\n              Escribir \"\";\n\n              Para l <- 4 Hasta 0 Con Paso -1 Hacer\n                Escribir \"  \", datosNumeros[l, 3] Sin Saltar ;\n              FinPara\n\n              Escribir \"\";\n\n            FinProceso\n        `}</pre>\n      </div>\n\n      <YoutubeEmbed embedId=\"watch?v=ngpPrvPLRjA\" />\n\n      <div>\n        <p className=\"enunciado-programas\">5. Se debe de imprimir el siguiente cuadro - dolikos</p>\n        <img src={cuadro} alt=\"cuadro\" />\n        <p>El usuario deberá insertar la fila y columna de la cual desea ver el resultado, el resultado de cada celda debe estar previamente calculado en una matriz bidimensional la cual cada resultado obedecerá a la fila y columna insertada por el usuario.</p>\n        <pre>{`\n            Proceso Ejercicio5 \n\t\n              Definir fila, columna, arreglo, i, j Como Entero; \n              Definir arregloTabla Como Entero; \n\n              Dimension arreglo[10, 10]; \n\n\n              Escribir \"   0   1   2   3   4   5   6   7   8   9\";\n\n              // Prueba validar resultados de la multiplicacion de datos ingresados \n              Para fila <- 1 Hasta 10 Con Paso 1 Hacer \n                Escribir  fila-1, \" \" Sin Saltar; \n                Para columna <- 1 Hasta 10 Con Paso 1 Hacer \n\n                  Escribir columna,  \"x\", fila , \" \" Sin Saltar; \n                FinPara \n                Escribir \"\"; \n              FinPara \n\n              Escribir \"\"; \n\n              i<-1; \n              j<-1; \n              // Ingresar datos al arreglo \n              Para fila <- 0 Hasta 9 Con Paso 1 Hacer \n                Para columna <- 0 Hasta 9 Con Paso 1 Hacer \n                  arreglo[fila, columna] <- i * j; \n                  i <- i+1; \n                FinPara \n                i<-1; \n                j <- j+1; \n              FinPara \n\n\n              Escribir \"Ingrese la fila a consultar: \"; \n              Leer fila; \n\n              Escribir \"Ingrese la columna a consultar: \"; \n              Leer columna; \n\n              //Limpiar Pantalla; \n\n              Escribir \"El resultado es: \", arreglo[fila, columna]; \n\n            FinProceso\n        `}</pre>\n      </div>\n      \n    </>\n  )\n}\n\nexport default TallerArreglos"]},"metadata":{},"sourceType":"module"}